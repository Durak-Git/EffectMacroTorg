{"_id":"CJDgfPaY8GtsoCP9","name":"btorgMacro","type":"script","author":"rJYyfh10ELPte2PI","img":"icons/svg/dice-target.svg","scope":"global","command":"let actorID =token?.actor.id ?? game.user.character.id;\nvar attr;\nvar bonu;\nvar dur;\nvar couleur;\nvar ic;\nvar newLabel;\nvar prevBonus = 0;\nvar maxAttr = 99;\nvar minAttr = 0;\nconst listSkills = game.actors.get(actorID).data.data.skills;\n\n//\nconst mychoice = new Promise((resolve, reject) => {\nvar entree = new Dialog({\n    title: game.i18n.localize(\"btorg.submit.choice\"),\n    content: game.i18n.localize(\"btorg.submit.choose\"),\n    buttons: {\n        mind: {\n            label: game.i18n.localize(\"btorg.attributes.mind\"),\n            callback: async html => {\n                resolve(\"mind\");\n                }\n            },\n        strength: {\n            label: game.i18n.localize(\"btorg.attributes.strength\"),\n            callback: async html => {\n            resolve(\"strength\");\n                }\n            },\n        charisma: {\n            label: game.i18n.localize(\"btorg.attributes.charisma\"),\n            callback: async html => {\n            resolve(\"charisma\");\n                }\n            },\n        spirit: {\n            label: game.i18n.localize(\"btorg.attributes.spirit\"),\n            callback: async html => {\n            resolve(\"spirit\");\n                }\n            },\n        dexterity: {\n            label: game.i18n.localize(\"btorg.attributes.dexterity\"),\n            callback: async html => {\n            resolve(\"dexterity\");\n                }\n            }\n        }\n\n}).render(true);\n});\nattr = await mychoice\n    .then (attr => {return attr;});\n//\nconst mybonus = new Promise((resolve, reject) => {\nnew Dialog({\n    title: game.i18n.localize(\"btorg.submit.bonusTitle\"),\n    content: `<div>${game.i18n.localize(\"btorg.submit.value\")} <input name=\"bonu\" value=1 style=\"width:50px\"/></div>`,\n    buttons: {\n        1: {\n        label: game.i18n.localize(\"btorg.submit.apply\"),\n        callback: html => {\n        let bonu = parseInt(html.find(\"[name=bonu]\")[0].value);\n        resolve(bonu);\n            }\n        }\n    },\n}).render(true);\n});\nbonu = await mybonus\n    .then (bonu => {return bonu;});\n//\nconst mytime = new Promise((resolve, reject) => {\nnew Dialog({\n    title: game.i18n.localize(\"btorg.submit.timeLabel\"),\n    content: `<div>${game.i18n.localize(\"btorg.submit.time\")} <input name=\"dur\" value=1 style=\"width:50px\"/></div>`,\n    buttons: {\n        1: {\n        label: game.i18n.localize(\"btorg.submit.apply\"),\n        callback: html => {\n        let dur = parseInt(html.find(\"[name=dur]\")[0].value);\n        resolve(dur);\n            }\n        }\n    },\n}).render(true);\n});\ndur = await mytime\n.then (dur => {return dur;});\n\n// Search for a limitation value and bonus correction\nvar tout = [];\nfor (var i of game.actors.get(actorID).effects) {\nvar tout = tout.concat(i.data.changes.filter(va => va.key === \"data.attributes.\"+attr));\n};\n\nfor (var i of tout) {\n    if (i.mode === 2) {prevBonus += Number.parseInt(i.value);}\n    else if (i.mode === 3) {maxAttr = Math.min(maxAttr, Number.parseInt(i.value));}\n    else if (i.mode === 4)  {minAttr = Math.max(minAttr, Number.parseInt(i.value));}\n    else if (i.mode === 5)  {\n    minAttr = Math.max(minAttr, Number.parseInt(i.value));\n    maxAttr = Math.min(maxAttr, Number.parseInt(i.value));\n    }\n}\nconsole.log(\"Downgrade ->\"+maxAttr +\"/Upgrade->\"+ minAttr +\"/oldBonus->\"+ prevBonus);\n//\nvar unModified = game.actors.get(actorID).effects.parent._source.data.attributes[attr];\n\nif ((unModified + bonu + prevBonus) >= maxAttr) {\n    bonu = maxAttr - unModified - prevBonus;\n    ChatMessage.create({content: `${game.i18n.localize(\"btorg.submit.mod\")}`});\n};\nif ((unModified + bonu + prevBonus) <= minAttr) {\n    bonu = minAttr - unModified - prevBonus;\n    ChatMessage.create({content: `${game.i18n.localize(\"btorg.submit.mod\")}`});\n};\n//Ajouter comments if modifications\n\nlet NewEffect = {\n                label : \"---\",\n                duration : {\"rounds\" : dur,\n                            \"turns\" : dur},\n                changes : [{                                                                                //Modify all existing \"basic\" defense in block\n                        \"key\": \"data.attributes.\"+attr,                                                         //Should need other work for defense vs powers\n                        \"value\": bonu,                                                                     //Create a data.ADB that store the bonus ?\n                        \"mode\": 2\n                        }],\n                disabled : false\n            };\n\nconst oldChange = NewEffect.changes;\nvar newChange = oldChange;\n//var createInit = [duplicate(oldChange[0])];\n//createInit[0].key = \"data.attributes.\"+attr;\n//createInit[0].value = bonu;\n//console.log(createInit);\n//newChange = newChange.concat(createInit);\n//newChange.splice(0, 1);\n//console.log(newChange);\n// Aspect modifications related to bonus/malus\nswitch (bonu < 0) {\ncase true:\n    NewEffect.tint = \"#ff0000\";\n    NewEffect.icon = \"icons/svg/downgrade.svg\";\nbreak;\ndefault:\n    NewEffect.tint = \"#00ff00\";\n    NewEffect.icon = \"icons/svg/upgrade.svg\";\n}\nNewEffect.label = game.i18n.localize(\"btorg.attributes.\"+attr)+\" / \"+bonu+\" / \"+dur+\"rd(s)\";\n\n//\n\nfor (var skillAttr in listSkills) {\n    if ((listSkills[skillAttr].baseAttribute === attr) && (listSkills[skillAttr].value >= 0)) {\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"data.skills.\"+skillAttr+\".value\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    };\n};\n\n// Defense modifications if necessary\nswitch (attr) {\ncase \"mind\" :\nvar createNew = [duplicate(oldChange[0])];\ncreateNew[0].key = \"data.trickDefense\";\ncreateNew[0].value = bonu;\nnewChange = newChange.concat(createNew);\nbreak;\ncase \"spirit\":\nvar createNew = [duplicate(oldChange[0])];\ncreateNew[0].key = \"data.intimidationDefense\";\ncreateNew[0].value = bonu;\nnewChange = newChange.concat(createNew);\nbreak;\ncase \"charisma\":\nvar createNew = [duplicate(oldChange[0])];\ncreateNew[0].key = \"data.tauntDefense\";\ncreateNew[0].value = bonu;\nnewChange = newChange.concat(createNew);\nbreak;\ncase \"dexterity\":\nvar createOne = [duplicate(oldChange[0])];\ncreateOne[0].key = \"data.dodgeDefense\";\ncreateOne[0].value = bonu;\nnewChange = newChange.concat(createOne);\nvar createTwo = [duplicate(oldChange[0])];\ncreateTwo[0].key = \"data.meleeWeaponsDefense\";\ncreateTwo[0].value = bonu;\nnewChange = newChange.concat(createTwo);\nvar createThree = [duplicate(oldChange[0])];\ncreateThree[0].key = \"data.unarmedCombatDefense\";\ncreateThree[0].value = bonu;\nnewChange = newChange.concat(createThree);\nbreak;\ndefault:\n}\nNewEffect.changes = newChange;\nconsole.log(NewEffect);\ngame.actors.get(actorID).createEmbeddedDocuments(\"ActiveEffect\",[NewEffect]);","folder":null,"sort":0,"permission":{"default":0,"nrS55t9HqVZ9hbjw":3,"rJYyfh10ELPte2PI":3},"flags":{"core":{"sourceId":"Macro.jmwbtiJ7VJtv1NT8"}}}
