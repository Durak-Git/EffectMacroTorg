{"name":"btorgMacro","type":"script","author":"rJYyfh10ELPte2PI","img":"systems/torgeternity/images/resizerRound.webp","scope":"global","command":"//target is the selected token, mandatory for the GM, or the player's character if no selection\nlet actorID =token?.actor.id ?? game.user.character.id;\n\nvar attr, bonu, dur;    //the attribute key, the bonus expected, the duration expected\nvar couleur, ic, newLabel;  //icon/name customization\nvar prevBonus = 0;\nvar maxAttr = 99;\nvar minAttr = 0;\nconst listSkills = game.actors.get(actorID).system.skills;\n\n// Choose the attribute you want to modify\nconst mychoice = new Promise((resolve, reject) => {\nvar entree = new Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.submit.choice\"),\n    content: game.i18n.localize(\"EffectMacroTorg.submit.choose\"),\n    buttons: {\n        mind: {\n            label: game.i18n.localize(\"EffectMacroTorg.attributes.mind\"),\n            callback: async html => {\n                resolve(\"mind\");\n                }\n            },\n        strength: {\n            label: game.i18n.localize(\"EffectMacroTorg.attributes.strength\"),\n            callback: async html => {\n            resolve(\"strength\");\n                }\n            },\n        charisma: {\n            label: game.i18n.localize(\"EffectMacroTorg.attributes.charisma\"),\n            callback: async html => {\n            resolve(\"charisma\");\n                }\n            },\n        spirit: {\n            label: game.i18n.localize(\"EffectMacroTorg.attributes.spirit\"),\n            callback: async html => {\n            resolve(\"spirit\");\n                }\n            },\n        dexterity: {\n            label: game.i18n.localize(\"EffectMacroTorg.attributes.dexterity\"),\n            callback: async html => {\n            resolve(\"dexterity\");\n                }\n            }\n        }\n}).render(true);\n});\nattr = await mychoice\n    .then (attr => {return attr;});\n\n//choose the bonus you expect\nconst mybonus = new Promise((resolve, reject) => {\nnew Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.submit.bonusTitle\"),\n    content: `<div>${game.i18n.localize(\"EffectMacroTorg.submit.value\")} <input name=\"bonu\" value=1 style=\"width:50px\"/></div>`,\n    buttons: {\n        1: {\n        label: game.i18n.localize(\"EffectMacroTorg.submit.apply\"),\n        callback: html => {\n        let bonu = parseInt(html.find(\"[name=bonu]\")[0].value);\n        resolve(bonu);\n            }\n        }\n    },\n}).render(true);\n});\nbonu = await mybonus\n    .then (bonu => {return bonu;});\n\n//choose the duration of the effect\nconst mytime = new Promise((resolve, reject) => {\nnew Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.submit.timeLabel\"),\n    content: `<div>${game.i18n.localize(\"EffectMacroTorg.submit.time\")} <input name=\"dur\" value=1 style=\"width:50px\"/></div>`,\n    buttons: {\n        1: {\n        label: game.i18n.localize(\"EffectMacroTorg.submit.apply\"),\n        callback: html => {\n        let dur = parseInt(html.find(\"[name=dur]\")[0].value);\n        resolve(dur);\n            }\n        }\n    },\n}).render(true);\n});\ndur = await mytime\n.then (dur => {return dur;});\n\n// Search for a limitation value and bonus correction\nvar tout = [];  //array of already existing effects related to the attribute\nfor (var i of game.actors.get(actorID).effects) {\n    tout = tout.concat(i.changes.filter(va => va.key === \"system.attributes.\"+attr));\n};\n\n\nfor (var i of tout) {\n    if (i.mode === 2) {prevBonus += Number.parseInt(i.value);}  //bonus already existing\n    else if (i.mode === 3) {maxAttr = Math.min(maxAttr, Number.parseInt(i.value));} //search for a downgrade effect\n    else if (i.mode === 4)  {minAttr = Math.max(minAttr, Number.parseInt(i.value));}//search for an upgrade effect\n    else if (i.mode === 5)  {                                                       //search for an overide value\n        minAttr = Math.max(minAttr, Number.parseInt(i.value));\n        maxAttr = Math.min(maxAttr, Number.parseInt(i.value));\n    }\n};\n\nconsole.log(\"Downgrade ->\"+maxAttr +\"/Upgrade->\"+ minAttr +\"/oldBonus->\"+ prevBonus);\n\n//bonus modification to match the max/min/override information\nvar unModified = game.actors.get(actorID)._source.system.attributes[attr];//unmodified base attribute\nif ((unModified + bonu + prevBonus) >= maxAttr) {\n    bonu = maxAttr - unModified - prevBonus;\n    ChatMessage.create({content: `${game.i18n.localize(\"EffectMacroTorg.submit.mod\")}`});\n};\nif ((unModified + bonu + prevBonus) <= minAttr) {\n    bonu = minAttr - unModified - prevBonus;\n    ChatMessage.create({content: `${game.i18n.localize(\"EffectMacroTorg.submit.mod\")}`});\n};\n//need comments if modifications ?\n\n//preparation of attribute effect, \"template\" for following skills effect\nlet NewEffect = {\n                label : \"---\",\n                duration : {\"rounds\" : dur,\n                            \"turns\" : dur},\n                changes : [{\n                        \"key\": \"system.attributes.\"+attr,\n                        \"value\": bonu,\n                        \"mode\": 2\n                        }],\n                disabled : false\n            };\n\n\n// Aspect modifications related to bonus/malus\nswitch (bonu < 0) {\ncase true:\n    NewEffect.tint = \"#ff0000\";\n    NewEffect.icon = \"icons/svg/downgrade.svg\";\nbreak;\ndefault:\n    NewEffect.tint = \"#00ff00\";\n    NewEffect.icon = \"icons/svg/upgrade.svg\";\n}\nNewEffect.label = game.i18n.localize(\"EffectMacroTorg.attributes.\"+attr)+\" / \"+bonu+\" / \"+dur+\"rd(s)\";\n\n//browsing skills, create the effects related to the attribute (code seems ugly, by I dare not touch it)\nconst oldChange = NewEffect.changes;\nvar newChange = oldChange;\nfor (var skillAttr in listSkills) {\n    if ((listSkills[skillAttr].baseAttribute === attr) && (listSkills[skillAttr].value >= 0)) {\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.skills.\"+skillAttr+\".value\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    };\n};\n\n// Defense modifications if necessary\nswitch (attr) {\n    case \"mind\" :\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.trickDefense\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    break;\n    case \"spirit\":\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.intimidationDefense\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    break;\n    case \"charisma\":\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.tauntDefense\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    break;\n    case \"dexterity\":\n        var createOne = [duplicate(oldChange[0])];\n        createOne[0].key = \"system.dodgeDefense\";\n        createOne[0].value = bonu;\n        newChange = newChange.concat(createOne);\n        var createTwo = [duplicate(oldChange[0])];\n        createTwo[0].key = \"system.meleeWeaponsDefense\";\n        createTwo[0].value = bonu;\n        newChange = newChange.concat(createTwo);\n        var createThree = [duplicate(oldChange[0])];\n        createThree[0].key = \"system.unarmedCombatDefense\";\n        createThree[0].value = bonu;\n        newChange = newChange.concat(createThree);\n        var createFour = [duplicate(oldChange[0])];\n        createFour[0].key = \"system.maneuverDefense\";\n        createFour[0].value = bonu;\n        newChange = newChange.concat(createFour);\n    break;\n    default:\n};\nNewEffect.changes = newChange;\nconsole.log(NewEffect);\n//at least, create the effect\ngame.actors.get(actorID).createEmbeddedDocuments(\"ActiveEffect\",[NewEffect]);","folder":null,"sort":0,"ownership":{"default":1},"flags":{},"_stats":{"systemId":"torgeternity","systemVersion":"2.5.1","coreVersion":"10.278","createdTime":1660940911142,"modifiedTime":1660986319240,"lastModifiedBy":"tb70Fb4rFLmwVwmf"},"_id":"eG7D2vBwdUO6ZVn3"}
