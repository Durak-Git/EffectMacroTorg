{"name":"BuffTorgMacro","type":"script","author":"xNU5Y90eN5jjcie3","img":"systems/torgeternity/images/resizerRound.webp","scope":"global","command":"//target is the selected token, mandatory for the GM, or the player's character if no selection\nlet actorID =token?.actor.id ?? game.user.character.id;\n\nvar attr, bonu, dur;    //the attribute key, the bonus expected, the duration expected\nvar couleur, ic, newLabel;  //icon/name customization\nvar prevBonus = 0;\nvar maxAttr = 99;\nvar minAttr = 0;\nconst listSkills = game.actors.get(actorID).system.skills;\n\n// Choose the attribute you want to modify\nconst mychoice = new Promise((resolve, reject) => {\nvar entree = new Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.choice\"),\n    content: game.i18n.localize(\"EffectMacroTorg.choose\"),\n    buttons: {\n        mind: {\n            label: game.i18n.localize(\"EffectMacroTorg.mind\"),\n            callback: async html => {\n                resolve(\"mind\");\n                }\n            },\n        strength: {\n            label: game.i18n.localize(\"EffectMacroTorg.strength\"),\n            callback: async html => {\n            resolve(\"strength\");\n                }\n            },\n        charisma: {\n            label: game.i18n.localize(\"EffectMacroTorg.charisma\"),\n            callback: async html => {\n            resolve(\"charisma\");\n                }\n            },\n        spirit: {\n            label: game.i18n.localize(\"EffectMacroTorg.spirit\"),\n            callback: async html => {\n            resolve(\"spirit\");\n                }\n            },\n        dexterity: {\n            label: game.i18n.localize(\"EffectMacroTorg.dexterity\"),\n            callback: async html => {\n            resolve(\"dexterity\");\n                }\n            },\n        defense: {\n            label: game.i18n.localize(\"EffectMacroTorg.defense\"),\n            callback: async html => {\n                resolve(\"defense\");\n                }\n            }\n        }\n}).render(true);\n});\nattr = await mychoice\n    .then (attr => {return attr;});\n\n//choose the bonus you expect\nconst mybonus = new Promise((resolve, reject) => {\nnew Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.bonusTitle\"),\n    content: `<div>${game.i18n.localize(\"EffectMacroTorg.value\")} <input name=\"bonu\" value=1 style=\"width:50px\"/></div>`,\n    buttons: {\n        1: {\n        label: game.i18n.localize(\"EffectMacroTorg.apply\"),\n        callback: html => {\n        let bonu = parseInt(html.find(\"[name=bonu]\")[0].value);\n        resolve(bonu);\n            }\n        }\n    },\n}).render(true);\n});\nbonu = await mybonus\n    .then (bonu => {return bonu;});\n\n//choose the duration of the effect\nconst mytime = new Promise((resolve, reject) => {\nnew Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.timeLabel\"),\n    content: `<div>${game.i18n.localize(\"EffectMacroTorg.time\")} <input name=\"dur\" value=1 style=\"width:50px\"/></div>`,\n    buttons: {\n        1: {\n        label: game.i18n.localize(\"EffectMacroTorg.apply\"),\n        callback: html => {\n        let dur = parseInt(html.find(\"[name=dur]\")[0].value);\n        resolve(dur);\n            }\n        }\n    },\n}).render(true);\n});\ndur = await mytime\n.then (dur => {return dur;});\n\nif (attr === \"defense\") {\n  let NewEffect = {\n    label : game.i18n.localize(\"EffectMacroTorg.defense\")+\" / \"+bonu+\" / \"+dur+\"rd(s)\",\n    duration : {\"rounds\" : dur},\n    changes : [{\n      \"key\": \"system.dodgeDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      },{\n      \"key\": \"system.meleeWeaponsDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      },{\n      \"key\": \"system.unarmedCombatDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      },{\n      \"key\": \"system.intimidationDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      },{\n      \"key\": \"system.maneuverDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      },{\n      \"key\": \"system.tauntDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      },{\n      \"key\": \"system.trickDefense\",\n      \"value\": bonu,\n      \"mode\": 2\n      }],\n    disabled : false,\n    tint : \"#00ff00\",\n    icon : \"icons/svg/upgrade.svg\"\n  };\n  game.actors.get(actorID).createEmbeddedDocuments(\"ActiveEffect\",[NewEffect]);\n}\nelse {\n// Search for a limitation value and bonus correction\nvar tout = [];  //array of already existing effects related to the attribute\nfor (var i of game.actors.get(actorID).effects) {\n    tout = tout.concat(i.changes.filter(va => va.key === \"system.attributes.\"+attr));\n};\n\n\nfor (var i of tout) {\n    if (i.mode === 2) {prevBonus += Number.parseInt(i.value);}  //bonus already existing\n    else if (i.mode === 3) {maxAttr = Math.min(maxAttr, Number.parseInt(i.value));} //search for a downgrade effect\n    else if (i.mode === 4)  {minAttr = Math.max(minAttr, Number.parseInt(i.value));}//search for an upgrade effect\n    else if (i.mode === 5)  {                                                       //search for an overide value\n        minAttr = Math.max(minAttr, Number.parseInt(i.value));\n        maxAttr = Math.min(maxAttr, Number.parseInt(i.value));\n    }\n};\n\nconsole.log(\"Downgrade ->\"+maxAttr +\"/Upgrade->\"+ minAttr +\"/oldBonus->\"+ prevBonus);\n\n//bonus modification to match the max/min/override information\nvar unModified = game.actors.get(actorID)._source.system.attributes[attr];//unmodified base attribute\nif ((unModified + bonu + prevBonus) >= maxAttr) {\n    bonu = maxAttr - unModified - prevBonus;\n    ChatMessage.create({content: `${game.i18n.localize(\"EffectMacroTorg.mod\")}`});\n};\nif ((unModified + bonu + prevBonus) <= minAttr) {\n    bonu = minAttr - unModified - prevBonus;\n    ChatMessage.create({content: `${game.i18n.localize(\"EffectMacroTorg.mod\")}`});\n};\n//need comments if modifications ?\n\n//preparation of attribute effect, \"template\" for following skills effect\nlet NewEffect = {\n                label : \"---\",\n                duration : {\"rounds\" : dur},\n                changes : [{\n                        \"key\": \"system.attributes.\"+attr,\n                        \"value\": bonu,\n                        \"mode\": 2\n                        }],\n                disabled : false\n            };\n\n\n// Aspect modifications related to bonus/malus\nswitch (bonu < 0) {\ncase true:\n    NewEffect.tint = \"#ff0000\";\n    NewEffect.icon = \"icons/svg/downgrade.svg\";\nbreak;\ndefault:\n    NewEffect.tint = \"#00ff00\";\n    NewEffect.icon = \"icons/svg/upgrade.svg\";\n}\nNewEffect.label = game.i18n.localize(\"EffectMacroTorg.\"+attr)+\" / \"+bonu+\" / \"+dur+\"rd(s)\";\n\n//browsing skills, create the effects related to the attribute (code seems ugly, by I dare not touch it)\nconst oldChange = NewEffect.changes;\nvar newChange = oldChange;\nfor (var skillAttr in listSkills) {\n    if ((listSkills[skillAttr].baseAttribute === attr) && (listSkills[skillAttr].value >= 0)) {\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.skills.\"+skillAttr+\".value\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    };\n};\n\n// Defense modifications if necessary\nswitch (attr) {\n    case \"mind\" :\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.trickDefense\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    break;\n    case \"spirit\":\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.intimidationDefense\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    break;\n    case \"charisma\":\n        var createNew = [duplicate(oldChange[0])];\n        createNew[0].key = \"system.tauntDefense\";\n        createNew[0].value = bonu;\n        newChange = newChange.concat(createNew);\n    break;\n    case \"dexterity\":\n        var createOne = [duplicate(oldChange[0])];\n        createOne[0].key = \"system.dodgeDefense\";\n        createOne[0].value = bonu;\n        newChange = newChange.concat(createOne);\n        var createTwo = [duplicate(oldChange[0])];\n        createTwo[0].key = \"system.meleeWeaponsDefense\";\n        createTwo[0].value = bonu;\n        newChange = newChange.concat(createTwo);\n        var createThree = [duplicate(oldChange[0])];\n        createThree[0].key = \"system.unarmedCombatDefense\";\n        createThree[0].value = bonu;\n        newChange = newChange.concat(createThree);\n        var createFour = [duplicate(oldChange[0])];\n        createFour[0].key = \"system.maneuverDefense\";\n        createFour[0].value = bonu;\n        newChange = newChange.concat(createFour);\n    break;\n    default:\n};\nNewEffect.changes = newChange;\nconsole.log(NewEffect);\n//at least, create the effect\ngame.actors.get(actorID).createEmbeddedDocuments(\"ActiveEffect\",[NewEffect]);\n}","ownership":{"default":1,"xNU5Y90eN5jjcie3":3},"flags":{"core":{"sourceId":"Compendium.EffectMacroTorg.EffectMacroTorg-macros.eG7D2vBwdUO6ZVn3"}},"_stats":{"systemId":"torgeternity","systemVersion":"2.6.8","coreVersion":"10.286","createdTime":1660940911142,"modifiedTime":1665178373336,"lastModifiedBy":"xNU5Y90eN5jjcie3"},"folder":null,"sort":0,"_id":"1pq9yfGrv56gHKAE"}
{"name":"ActiveDefense for Threats Multi","type":"script","scope":"global","author":"cK1uI0qnYYKgiAXP","img":"icons/svg/combat.svg","command":"var targets = canvas.tokens.controlled;\nif (targets.length === 0){\n    ui.notifications.error(\"You must select a token!\");\n    return\n};\ntargets.forEach(element => {\n    var myActor = element.actor;\n    console.log(myActor);\nif (!myActor) {\nui.notifications.error(\"You must select a token!\");    \n} else {\nvar oldAD = myActor.effects.find(a => a.label === \"ActiveDefense\");\n\nif (!oldAD) {\nvar jet = new Roll(\"1d20x10x20\").evaluate({ async: false });\nvar bo = Math.max(1,game.effectMacroTorg.torgB(jet.total));\nlet AD = {\n                speaker: ChatMessage.getSpeaker(),\n                content: \"Active defense +\"+ bo\n            };\nChatMessage.create(AD);\n\n            let NewActiveDefense = {\n                label : \"ActiveDefense\",         \n                icon : \"icons/equipment/shield/heater-crystal-blue.webp\",   \n                duration : {\"rounds\" : 1},\n                changes : [{  \n                        \"key\": \"system.dodgeDefense\",  \n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                        },{\n                        \"key\": \"system.intimidationDefense\",\n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                        },{\n                        \"key\": \"system.maneuverDefense\",\n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                        },{\n                        \"key\": \"system.meleeWeaponsDefense\",\n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                        },{\n                        \"key\": \"system.tauntDefense\",\n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                        },{\n                        \"key\": \"system.trickDefense\",\n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                        },{\n                        \"key\": \"system.unarmedCombatDefense\",\n                        \"value\": bo,\n                        \"priority\": 20,\n                        \"mode\": 2\n                    }],\n                disabled : false\n            };\n            myActor.createEmbeddedDocuments(\"ActiveEffect\",[NewActiveDefense]);\n\n        };\nif (oldAD) {\nlet RAD = {\n                speaker: ChatMessage.getSpeaker(),\n                content: game.i18n.localize('torgeternity.chatText.check.result.resetDefense')\n            };\nChatMessage.create(RAD);\nmyActor.effects.find(a => a.label === \"ActiveDefense\").delete();\n}};\n});","ownership":{"default":0,"cK1uI0qnYYKgiAXP":3},"flags":{"core":{"sourceId":"Macro.shcnPvXCgUMBdcCM"}},"_stats":{"systemId":"torgeternity","systemVersion":"2.6.9","coreVersion":"10.288","createdTime":1662405024220,"modifiedTime":1665846148178,"lastModifiedBy":"cK1uI0qnYYKgiAXP"},"folder":null,"sort":0,"_id":"l3UXt1WNTUnoWU2q"}
{"name":"ShowNextDramaCard","type":"script","scope":"global","author":"mTnF434oFfSiviy6","img":"icons/svg/eye.svg","command":"if (!game.user.isGM) {return};\nif (game.combats.map(ccc => ccc.round === 0)[0] || game.combats.size === 0) {return console.log(game.i18n.localize(\"EffectMacroTorg.noFight\"))};\n\nlet applyChanges = false;\nlet users = game.users.filter(user => user.active && !user.isGM);\nlet checkOptions = \"\"\nlet playerTokenIds = users.map(u => u.character?.id).filter(id => id !== undefined);\nlet selectedPlayerIds = canvas.tokens.controlled.map(token => {\n  if (playerTokenIds.includes(token.actor.id)) return token.actor.id;\n});\n\n// Build checkbox list for all active players\nusers.forEach(user => {\n  let checked = !!user.character && selectedPlayerIds.includes(user.character.id) && 'checked';\n  checkOptions+=`\n    <br>\n    <input type=\"checkbox\" name=\"${user.id}\" id=\"${user.id}\" value=\"${user.name}\" ${checked}>\\n\n    <label for=\"${user.id}\">${user.name}</label>\n  `\n});\n\n// Choose the nb of cards to show\nconst mychoice = new Promise((resolve, reject) => {\n  new Dialog({\n    title: game.i18n.localize(\"EffectMacroTorg.nbCards\"),\n    content: game.i18n.localize(\"EffectMacroTorg.nbCardsValue\"),\n    buttons: {\n        1: {label: 1,\n            callback: async html => {resolve(1);}},\n        2: {label: 2,\n            callback: async html => {resolve(2);}},\n        3: {label: 3,\n            callback: async html => {resolve(3);}}\n        }\n}).render(true);\n});\n\nlet nbc= await mychoice\n    .then (nbc=> {return nbc;});\n\n//Find the Drama Deck\nlet dram = game.cards.find(i => i.name === \"Drama Deck\");\n// Find the index of the Active Drama Card in the Drama Deck\nvar ind = game.cards.get(game.cards.find(i => i.name === \"Active Drama Card\").id).data._source.cards[0].sort;\n\nnew Dialog({\n  title: game.i18n.localize(\"EffectMacroTorg.recipient\"),\n  content:`${game.i18n.localize(\"EffectMacroTorg.whisper\")} ${checkOptions} <br>`,\n    buttons:{\n    whisper:{   \n      label:game.i18n.localize(\"EffectMacroTorg.apply\"),\n      callback: (html) => createMessage(html)\n    }\n  }\n}).render(true);\n\nfunction createMessage(html) {\n  var targets = [];\n  // build list of selected players ids for whispers target\n  for ( let user of users ) {\n    if (html.find('[name=\"'+user.id+'\"]')[0].checked){\n      applyChanges=true;\n      targets.push(user.id);\n    }\n    \n  }\nif(!applyChanges)return;\nfor (let j = 0; j < nbc; j++) {\n  let card = dram.cards.find(i => i.sort === ind+j+1);\n  \n  \n    ChatMessage.create({\n      whisper: targets,\n      content: `<div class=\"card-draw flexrow\"><span class=\"card-chat-tooltip\"><img class=\"card-face\" src=\"${card.img}\"/><span><img src=\"${card.img}\"></span></span><span class=\"card-name\"> ${game.i18n.localize(\"torgeternity.show\")} ${card.name}</span>\n                </div>`,\n     \n    });\n  }\n}","ownership":{"default":0,"mTnF434oFfSiviy6":3},"flags":{"core":{"sourceId":"Macro.Jo9nQEuj49SZXTNf"}},"_stats":{"systemId":"torgeternity","systemVersion":"2.6.8","coreVersion":"10.286","createdTime":1662820658806,"modifiedTime":1665180285782,"lastModifiedBy":"ND9R7bSVKI6iGEFc"},"folder":null,"sort":0,"_id":"v7tqEgckrad0cbyJ"}
